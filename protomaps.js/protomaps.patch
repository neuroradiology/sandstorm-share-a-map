--- protomaps.js.orig	1985-10-26 04:15:00.000000000 -0400
+++ protomaps.js	2023-08-08 14:50:29.028000000 -0400
@@ -1,3 +1,12 @@
+// Until we get range headers in Sandstorm
+function sandstormRangeHack(url, rangeFirst, rangeLast) {
+  if (url.includes('?')) {
+    return url + '&rangeFirst=' + rangeFirst + '&rangeLast=' + rangeLast
+  } else {
+    return url + '?rangeFirst=' + rangeFirst + '&rangeLast=' + rangeLast
+  }
+}
+
 var protomaps = (() => {
   var __create = Object.create;
   var __defProp = Object.defineProperty;
@@ -2487,9 +2496,12 @@
           controller = new AbortController();
           signal = controller.signal;
         }
-        let resp = yield fetch(this.url, {
+        const rangeFirst = offset
+        const rangeLast = (offset + length - 1)
+        const rangeUrl = sandstormRangeHack(this.url, rangeFirst, rangeLast)
+        let resp = yield fetch(rangeUrl, {
           signal,
-          headers: { Range: "bytes=" + offset + "-" + (offset + length - 1) }
+          headers: { Range: "bytes=" + rangeFirst + "-" + rangeLast }
         });
         if (resp.status === 416 && offset === 0) {
           const content_range = resp.headers.get("Content-Range");
@@ -2497,9 +2509,12 @@
             throw Error("Missing content-length on 416 response");
           }
           const actual_length = +content_range.substr(8);
-          resp = yield fetch(this.url, {
+          const rangeFirst = 0
+          const rangeLast = (actual_length - 1)
+          const rangeUrl = sandstormRangeHack(this.url, rangeFirst, rangeLast)
+          resp = yield fetch(rangeUrl, {
             signal,
-            headers: { Range: "bytes=0-" + (actual_length - 1) }
+            headers: { Range: "bytes=" + rangeFirst + "-" + rangeLast }
           });
         }
         if (resp.status >= 300) {
@@ -3797,6 +3812,7 @@
     majorRoadCasing: "#FFB9B9",
     mediumRoadCasing: "#FFCE8E",
     minorRoadCasing: "#cccccc",
+    nonDrivingRoad: "#CC8888",
     highway: "#FFCEBB",
     majorRoad: "#FFE4B3",
     mediumRoad: "#FFF2C8",
@@ -3815,39 +3831,9 @@
   };
 
   // src/default_style/dark.ts
+  // Remove everything to make sure we don't accidentally use dark mode without
+  // actually accounting for it with our changes, such as adding paths.
   var dark = {
-    earth: "#151515",
-    glacier: "#1c1c1c",
-    residential: "#252B2F",
-    hospital: "#3E2C2C",
-    cemetery: "#36483D",
-    school: "#2C3440",
-    industrial: "#33312C",
-    wood: "#3A3E38",
-    grass: "#4E604D",
-    park: "#2C4034",
-    water: "#4D5B73",
-    sand: "#777777",
-    buildings: "#464545",
-    highwayCasing: "#000000",
-    majorRoadCasing: "#1C1B1B",
-    mediumRoadCasing: "#3E3E3E",
-    minorRoadCasing: "#000000",
-    highway: "#5B5B5B",
-    majorRoad: "#595959",
-    mediumRoad: "#4F4F4F",
-    minorRoad: "#393939",
-    boundaries: "#666666",
-    mask: "#dddddd",
-    countryLabel: "#ffffff",
-    cityLabel: "#FFFFFF",
-    stateLabel: "#ffffff",
-    neighbourhoodLabel: "#FDFDFD",
-    landuseLabel: "#DDDDDD",
-    waterLabel: "#707E95",
-    naturalLabel: "#4c4c4c",
-    roadsLabel: "#C4C4C4",
-    poisLabel: "#959393"
   };
 
   // node_modules/color2k/dist/index.module.js
@@ -5157,6 +5143,20 @@
         }
       },
       {
+        dataLayer: "roads",
+        symbolizer: new LineSymbolizer({
+          color: params.nonDrivingRoad,
+          dash: [2, 4],
+          width: exp(1.4, [
+            [12, 2],
+            [20, 3],
+          ])
+        }),
+        filter: (z2, f2) => {
+          return f2.props["pmap:kind"] == "non_driving_road";
+        }
+      },
+      {
         dataLayer: "roads",
         symbolizer: new LineSymbolizer({
           color: params.minorRoad,
